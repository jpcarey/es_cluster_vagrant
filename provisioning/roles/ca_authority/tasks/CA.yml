---
# CA setup
# - file: path={{ playbook_dir }}/certs/ca state=directory
- file: path={{ playbook_dir }}/{{ item }} state=directory
  with_items:
    - certs/ca/certs
    - certs/ca/crl
    - certs/ca/csr
    - certs/ca/newcerts
    - certs/ca/private

- file: path={{ playbook_dir }}/certs/ca/index.txt state=touch
- copy: content="1000" dest="{{ playbook_dir }}/certs/ca/serial"

- name: OpenSSL | Generate openssl CA config file
  template: src=templates/openssl-ca.cnf.j2 dest={{ playbook_dir }}/certs/ca/openssl-ca.cnf

- name: OpenSSL | Create CA root key
  command: 'openssl genrsa -aes256 -passout pass:{{ CA_password }} -out private/ca.key.pem 4096'
  args:
    chdir: '{{ playbook_dir }}/certs/ca'
    creates: '{{ playbook_dir }}/certs/ca/private/ca.key.pem'

- name: OpenSSL | Create CA root cert
  command: 'openssl req -config openssl-ca.cnf -new -passin pass:{{ CA_password }} \
    -subj "{{ CA_CN }}" -x509 -days 7300 -sha256 -extensions v3_ca -key private/ca.key.pem \
    -out certs/ca.cert.pem'
  args:
    chdir: '{{ playbook_dir }}/certs/ca'
    creates: '{{ playbook_dir }}/certs/ca/certs/ca.cert.pem'

# CA truststore
- name: Java Keytool | Truststore CA
  command: 'keytool -importcert -noprompt -alias my_ca \
    -keystore truststore.jks  -storepass password -keypass password \
    -file {{ playbook_dir }}/certs/ca/certs/ca.cert.pem'
  args:
    chdir: '{{ playbook_dir }}/certs/keytool'
  register: trust_ca
  changed_when: trust_ca.rc == 0
  ignore_errors: true
  # changed_when: '"already exists" not in trust_ca.stdout and trust_ca.rc == 1'
  # failed_when: '("already exists" not in trust_ca.stdout and trust_ca.rc == 1) or (trust_ca.rc == 0)'
